#ifndef _OfficeAutomation_Excel_h_
#define _OfficeAutomation_Excel_h_


/* 
Project created 01/18/2019 
By Clément Hamon Email: hamon.clement@outlook.fr
Lib used to drive every Microsoft Application's had OLE Compatibility.
This project have to be used with Ultimate++ FrameWork and required the Core Librairy from it
http://www.ultimatepp.org
Copyright © 1998, 2019 Ultimate++ team
All those sources are contained in "plugin" directory. Refer there for licenses, however all libraries have BSD-compatible license.
Ultimate++ has BSD license:
License : https://www.ultimatepp.org/app$ide$About$en-us.html
Thanks to UPP team
*/

class ExcelApp; //Class represents an   Excel Application 
class ExcelWorkbook; //Class represents Excel Workbook
class ExcelSheet; //Class represents an Excel WorkSheet
class ExcelRange; //Class represents an Excel Range
class ExcelCell; //Class represents  an Excel Cell

typedef ExcelApp Excel;
typedef ExcelWorkbook Workbook;
typedef ExcelSheet Sheet;
typedef ExcelRange Range;
typedef ExcelCell Cell;

class ExcelApp : public Ole , public Upp::Moveable<ExcelApp> {
	private:
		bool ExcelIsStarted; //Bool to know if we started Excel
		Upp::Vector<ExcelWorkbook> workbooks; //Vector of every workbook
	public:
		ExcelApp(); //Initialise COM
		~ExcelApp(); //Unitialise COM
		
		bool Start(bool startEventListener = false); //Start new Excel Application
		bool Find(bool startEventListener=false); //find first oppened excel application
		bool FindOrStart(bool startEventListener = false); //Find running Excel or Start new One
		bool FindOrStartPredictedWorkbook(Upp::String name,bool startEventListener = false); //Find running Excel with current wb or start new Excel
		bool Quit(); //Close current Excel Application
		
		bool FindApplication(bool startEventListener = false); //Find First current Excel Application openned
		bool SetVisible(bool set); //Set or not the application visible
		
		ExcelWorkbook Workbooks(int index); //Allow to retrieve workbook by is index
		ExcelWorkbook Workbooks(Upp::String name); //Allow to retrieve workbook by is name
		
		ExcelWorkbook NewWorkbook(); //Create new Workbook and add it to actual excel Running method
		ExcelWorkbook OpenWorkbook(Upp::String FilePath); //Find and Open Workbook by FilePath
		ExcelWorkbook FindOrOpenWorkBook(Upp::String filePath); //Look at current openned workbook and open it if not open
		
		int GetNumberOfWorkbook(); //Return number of workbook currently openned on this excel App
		bool RemoveAWorkbookFromVector(ExcelWorkbook* wb); // remove workbook from vector
		bool ResolveWorkbook();
};

class ExcelWorkbook : public Ole, public Upp::Moveable<ExcelWorkbook>{
	private:
		ExcelApp* parent=NULL; //Pointer to excelApp
		Upp::Vector<ExcelSheet> sheets; //Vector of every Worksheets
		bool isOpenned = false; //This bool must be useless But I prefere to have in case of object is still present in memory by a missing unreferenced pointer
	public:
		ExcelApp*const GetParent()const; //Getter on parent pointer
		const Upp::Vector<ExcelSheet>& GetVector()const; //Return vector
		const bool GetOpen()const;
		
		ExcelWorkbook(); //Classic constructor
		~ExcelWorkbook();//Classic destructor
		ExcelWorkbook(const ExcelWorkbook&); //Copy constructor.
		ExcelWorkbook& operator=(ExcelWorkbook&&) = default; //moveable operator
		ExcelWorkbook(ExcelApp &parent,VARIANT AppObj); //Constructor basic
		ExcelWorkbook& operator=(const ExcelWorkbook &wb);
		
		bool Save(); //Save current workbook
		bool SaveAs(Upp::String filePath); //Save current workbook at filePath
		bool Close(); //Close current workbook
		bool isReadOnly(); //Return true if the workbook is readOnly
		Upp::String Name(); //Return wb name
		Upp::String Path(); //Return wb path
		
		ExcelSheet Sheets(int index);//Allow to retrieve worksheet by is index
		ExcelSheet Sheets(Upp::String name);//Allow to retrieve worksheet by is name
		ExcelSheet AddSheet(); //Create new Sheet with default Name
		ExcelSheet AddSheet(Upp::String sheetName); //Create new Sheet with defined name
		
		bool ResolveSheet(); //Function that calculate all the sheet on openned workbook
};

class ExcelSheet : public Ole, public Upp::Moveable<ExcelSheet>{
	private:
		ExcelWorkbook* parent =NULL;//Pointer to excelworkbook
	public:
		ExcelWorkbook*const GetParent()const; //Getter on parent pointer
		
		ExcelSheet(); //Classic constructor
		~ExcelSheet(); //Classic desctructor
		ExcelSheet(ExcelWorkbook &parent,VARIANT AppObj); //Classic constructor
		ExcelSheet& operator=(const ExcelSheet &ws);
		
		bool SetName(Upp::String sheetName); //Redefine name of sheet
		int GetLastRow(Upp::String Colonne); //Retrieve last row of a colonne
		int GetLastColumn(); // Retrieve the last Column
		int GetRowNumberOfMySheet(); //Retrieve the max number generated by excel. It's usefull to make a huge range that wrap entire sheet
	
		ExcelRange Range(Upp::String range); //Return a Range
		ExcelRange GetCurrentRegion(); //Return ExcelRange that's represente the entire active range of the actual sheet
		ExcelCell Cells(int ligne, int colonne); //Return a Cells
};

class ExcelRange : public Ole {
	private:
		ExcelSheet* parent=NULL; //Pointer to excelWorkbook
		Upp::String range; //range of the object
	public:
		ExcelSheet*const GetParent()const; //Getter on parent pointer
		
		ExcelRange();
		~ExcelRange();
		ExcelRange(ExcelSheet &parent,VARIANT appObj); //allow to create ExcelRange on current Variant
		ExcelRange(ExcelSheet &parent,VARIANT appObj,Upp::String actualRange); //This constructor allow user to pass the range used to get this object.
																			   //It's very important if you want to be able to use every function that
																			   //do job on vector or return vector of Cells
																			   
		Upp::String GetTheRange(); //Return the range used to get the Item, it can be empty
		ExcelCell Cells(int ligne, int colonne); //Return a Cells by is column and row
		
		/*
			// From NOW you must have a ExcelRange where Upp::String range is initialized
		*/

		Upp::Vector<ExcelCell> Value(); //Return every  Cells on a Vector of Cells
		
		bool Value(Upp::String value); //set this value to every cells of the range
		bool Value(int value); //set this value to every cells of the range
		/*
			Here we must add every method a Range could land  exemple : Borders
		*/
};

class ExcelCell : public Ole , public Upp::Moveable<ExcelCell> {
	private:
		ExcelRange* parent= NULL; //pointer to the range
	public:
		ExcelRange*const GetParent()const; //Getter on parent pointer
		~ExcelCell();
		ExcelCell(ExcelRange &parent,VARIANT appObj); //Classic constructor
		ExcelCell(VARIANT appObj);//Constructor if parent not important (Some ExcelSheet function directly return cells without range setted)
		/*
			Here we must add every method a cell could land
		*/
		Upp::String Value(); //Get the Value of the cells
		bool Value(Upp::String value);//Set value of Cells
		bool Value(int value);//Set value of Cells
};

#endif
